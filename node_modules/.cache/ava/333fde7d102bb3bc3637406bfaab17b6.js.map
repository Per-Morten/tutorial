{"version":3,"sources":["api.test.js"],"names":["request","require","PersonModel","db","mongoose","person","firstname","lastname","address","postcode","cb","before","t","then","end","catch","err","fail","after","connection","dropDatabase","close","newUser","beforeEach","remove","create","Object","assign","user","server","serial","retObject","plan","length","get","_id","expect","response","entries","body","forEach","key","value","indexOf","pass"],"mappings":"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","file":"api.test.js","sourcesContent":["import test from 'ava';\n\nconst request = require('supertest');\nconst PersonModel = require('../../models/Person');\nconst db = require('../database');\nconst mongoose = require('mongoose');\n\n\nconst person = {\n    firstname: 'Bjarte',\n    lastname: 'Larsen',\n    address: 'Prost bloms gate 38',\n    postcode: 2819,\n};\n\n\ntest.cb.before((t) => {\n    db('person-api-test')\n        .then(() => t.end())\n        .catch(err => t.fail(err));\n});\ntest.cb.after((t) => {\n    mongoose.connection.db.dropDatabase(() => {\n        mongoose.connection.close();\n        t.end();\n    })\n});\n\nlet newUser = null;\n\ntest.cb.beforeEach((t) => {\n   PersonModel.remove({}, () => {\n        PersonModel.create(Object.assign({}, person))\n        .then(user => {\n            if(user) {\n                newUser = user;\n                t.end();\n            }\n        })\n        .catch(err => t.fail(`Failed beforeeach with error ${err}`));\n   }) ;\n});\n\n\nconst server = require('../../classes/App');\n\n\ntest.serial('Should Return a person', async (t) => {\n    if(!newUser) t.fail('No new user');\n\n    const retObject = ['firstname', 'lastname', 'address', 'postcode', '_id', '__v'];\n    t.plan(retObject.length + 1);\n\n    await request(server)\n        .get('/person/' + newUser._id)\n        .expect(200)\n        .then(response => {\n            Object.entries(response.body).forEach(\n                ([key, value]) => {\n                    if(retObject.indexOf(key) === -1 || value === '') {\n                        t.fail(`Person returned invalid object name ${key} value ${value}`);\n                    }else {\n                        t.pass();\n                    }\n                }\n            )\n        })\n        .catch(err => t.fail(err));\n\n    t.pass();\n});\n\n\n\ntest.serial('Should Not Return a person', async (t) => {\n    const retObject = ['code', 'message'];\n    t.plan(retObject.length + 1);\n\n    await request(server)\n        .get('/person/sdgsadgasdgsdagadsg')\n        .expect(500)\n        .then(response => {\n            Object.entries(response.body).forEach(\n                ([key, value]) => {\n                    if(retObject.indexOf(key) === -1 || value === '') {\n                        t.fail(`Person returned invalid object name ${key} value ${value}`);\n                    }else {\n                        t.pass();\n                    }\n                }\n            )\n        })\n        .catch(err => t.fail(err));\n\n    t.pass();\n});"]}